"use strict";(self.webpackChunkpcapplusplus_github_io=self.webpackChunkpcapplusplus_github_io||[]).push([[6906],{138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tutorials/dpdk","title":"Part 6: Working With DPDK","description":"Introduction","source":"@site/versioned_docs/version-v24.09/tutorials/dpdk.mdx","sourceDirName":"tutorials","slug":"/tutorials/dpdk","permalink":"/docs/v24.09/tutorials/dpdk","draft":false,"unlisted":false,"editUrl":"https://github.com/PcapPlusPlus/pcapplusplus.github.io/edit/master/versioned_docs/version-v24.09/tutorials/dpdk.mdx","tags":[],"version":"v24.09","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"docs","previous":{"title":"Part 5: Packet Crafting","permalink":"/docs/v24.09/tutorials/packet-crafting"},"next":{"title":"Supported platforms","permalink":"/docs/v24.09/platforms"}}');var i=n(4848),r=n(8453),a=n(4650);const o={sidebar_position:6},c="Part 6: Working With DPDK",d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Set up DPDK Devices",id:"set-up-dpdk-devices",level:2},{value:"DPDK Worker Threads",id:"dpdk-worker-threads",level:2},{value:"Start Worker Threads",id:"start-worker-threads",level:2},{value:"Management And Statistics Collection",id:"management-and-statistics-collection",level:2},{value:"Running the code",id:"running-the-code",level:2},{value:"Option 1: Install a pre-compiled version of PcapPlusPlus",id:"option-1-install-a-pre-compiled-version-of-pcapplusplus",level:3},{value:"Option 2: build the tutorials with PcapPlusPlus",id:"option-2-build-the-tutorials-with-pcapplusplus",level:3},{value:"Post build",id:"post-build",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"part-6-working-with-dpdk",children:"Part 6: Working With DPDK"})}),"\n",(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(t.p,{children:"One of the key advantages of PcapPlusPlus over similar libraries is its extensive support for the Data Plane Development Kit (DPDK). PcapPlusPlus provides an extensive wrapper for DPDK which encapsulates most of its important and commonly used APIs in an easy-to-use C++ way."}),"\n",(0,i.jsx)(t.p,{children:"This tutorial will go through the fundamentals of using PcapPlusPlus with DPDK. It will demonstrate how to build a L2 forwarding (bridge) application that receives packets on one interface and sends them on another interface. It may sound simple, but DPDK enables to do that in wire speed (!). This example will demonstrate some of the key APIs and concepts in PcapPlusPlus wrapper for DPDK."}),"\n",(0,i.jsxs)(t.p,{children:["This specific example was chosen because it corresponds to a similar example in DPDK documentation called ",(0,i.jsx)(t.a,{href:"https://doc.dpdk.org/guides-18.08/sample_app_ug/l2_forward_real_virtual.html",children:"L2 Forwarding"})," which many DPDK users are probably familiar with, and that may help in better understanding the code and the idea behind it."]}),"\n",(0,i.jsxs)(t.p,{children:["Before starting this tutorial it is highly recommended to have a basic understanding of what DPDK is (you can find a lot of reading material in ",(0,i.jsx)(t.a,{href:"http://dpdk.org/",children:"DPDK web-site"}),") and also read the page describing ",(0,i.jsx)(t.a,{href:"../dpdk",children:"PcapPlusPlus support for DPDK"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["For further information about the APIs and classes please refer to the ",(0,i.jsx)(t.a,{href:"../api",children:"API documentation"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Before diving into the code, let's see how our L2 forwarding (bridge) application will be built:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"L2Fwd",src:n(5355).A+"",width:"817",height:"423"})}),"\n",(0,i.jsx)(t.p,{children:"As you can see, we will use 2 DPDK-controlled NICs, one from each side of the network. We'll also have 2 worker threads. The first thread will receive packets on NIC #1 and will send them on NIC #2 and the other thread will receive packets on NIC #2 and will send them on NIC #1. Now that we have this basic understanding let's go ahead and build this application!"}),"\n",(0,i.jsx)(t.h2,{id:"set-up-dpdk-devices",children:"Set up DPDK Devices"}),"\n",(0,i.jsx)(t.p,{children:"The first thing any application that uses DPDK should do is initialize DPDK and set up the DPDK interfaces (devices). This initialization involves a couple of steps and we'll go through all of them."}),"\n",(0,i.jsxs)(t.p,{children:["The first step is done before running the application. PcapPlusPlus contains a shell script called ",(0,i.jsx)(t.code,{children:"setup-dpdk.sh"})," which initializes Huge Pages (which are required for DPDK's memory allocation) and DPDK kernel driver which removes kernel control from selected NICs and hand it over to DPDK. You can read more about it in ",(0,i.jsx)(t.a,{href:"../dpdk",children:"PcapPlusPlus support for DPDK"})," page."]}),"\n",(0,i.jsxs)(t.p,{children:["The second step is done in the application's code and is a general DPDK initialization phase. It is also described in the ",(0,i.jsx)(t.a,{href:"../dpdk",children:"PcapPlusPlus support for DPDK"})," page and contains steps like initialize DPDK internal structures and memory pools, initialize packet memory pool, and more. Lets start by writing a general main method and initialize DPDK:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#include <vector>\n#include <unistd.h>\n#include <sstream>\n#include "SystemUtils.h"\n#include "DpdkDeviceList.h"\n#include "TablePrinter.h"\n#include "WorkerThread.h"\n\n#define MBUF_POOL_SIZE 16*1024-1\n#define DEVICE_ID_1 0\n#define DEVICE_ID_2 1\n\nint main(int argc, char* argv[])\n{\n    // Initialize DPDK\n    pcpp::CoreMask coreMaskToUse = pcpp::getCoreMaskForAllMachineCores();\n    pcpp::DpdkDeviceList::initDpdk(coreMaskToUse, MBUF_POOL_SIZE);\n\n    ....\n    ....\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"There are couple of steps here:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Decide of the mbuf pool size. mbufs are DPDK structures for holding packet data. Each mbuf holds one packet data or a portion (segment) of it. On application start-up DPDK allocates memory for creating a pool of mbufs that will be used by the application throughout its runtime. That way DPDK avoids the overhead of creating mbufs and allocating memory during application run. Let's decide that the size of this mbuf pool is 16383 mbufs. It is recommended to set a size that is a power of 2 minus 1 (in our case: 16383 = 2^14 - 1)"}),"\n",(0,i.jsx)(t.li,{children:"Decide which CPU cores will take part in running the application. DPDK leverages multi-core architecture to parallelize packet processing. In our case we initialize DPDK with all cores available on the machine"}),"\n",(0,i.jsxs)(t.li,{children:["Invoke ",(0,i.jsx)(t.code,{children:"pcpp::DpdkDeviceList::initDpdk()"})," which runs the initialization"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Now let's find the DPDK interfaces (devices) we'll use to send and receive packets. The class ",(0,i.jsx)(t.code,{children:"DpdkDevice"})," encapsulates a DPDK interface. The singleton ",(0,i.jsx)(t.code,{children:"DpdkDeviceList"})," contains all DPDK devices that are available for us to use:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'// Find DPDK devices\npcpp::DpdkDevice* device1 = pcpp::DpdkDeviceList::getInstance().getDeviceByPort(DEVICE_ID_1);\nif (device1 == nullptr)\n{\n    std::cerr << "Cannot find device1 with port \'" << DEVICE_ID_1 << "\'" << std::endl;\n    return 1;\n}\n\npcpp::DpdkDevice* device2 = pcpp::DpdkDeviceList::getInstance().getDeviceByPort(DEVICE_ID_2);\nif (device2 == nullptr)\n{\n    std::cerr << "Cannot find device2 with port \'" << DEVICE_ID_2 << "\'" << std::endl;\n    return 1;\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["As you can see, we're using the ",(0,i.jsx)(t.code,{children:"DpdkDeviceList"})," singleton to get the 2 DPDK devices. The port numbers ",(0,i.jsx)(t.em,{children:"DEVICE_ID_1"})," (of value 0) and ",(0,i.jsx)(t.em,{children:"DEVICE_ID_2"})," (of value 1) are determined by DPDK and we should know them in advance."]}),"\n",(0,i.jsx)(t.p,{children:"The next step is to open the 2 devices so we can start receiving and sending packets through them. Let's see the code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'// Open DPDK devices\nif (!device1->openMultiQueues(1, 1))\n{\n    std::cerr << "Couldn\'t open device1 #" << device1->getDeviceId() << ", PMD \'" << device1->getPMDName() << "\'" << std::endl;\n    return 1;\n}\n\nif (!device2->openMultiQueues(1, 1))\n{\n    std::cerr << "Couldn\'t open device2 #" << device2->getDeviceId() << ", PMD \'" << device2->getPMDName() << "\'" << std::endl;\n    return 1;\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["As you can see we're using a method called ",(0,i.jsx)(t.code,{children:"openMultiQueues()"}),". This method opens the device with a provided number of RX and TX queues. The number of supported RX and TX queues varies between NICs. You can get the number of supported queues by using the following methods: ",(0,i.jsx)(t.code,{children:"DpdkDevice::getTotalNumOfRxQueues()"})," and ",(0,i.jsx)(t.code,{children:"DpdkDevice::getTotalNumOfTxQueues()"}),". The reason for opening more than 1 RX/TX queue is to parallelize packet processing over multiple cores where each core is responsible for 1 or more RX/TX queues. On RX, The NIC is responsible to load-balance RX packets to the different queues based on a provided hash function. Doing this inside the NIC makes it much faster and offloads processing from CPU cores. This load balancing mechanism is called Receive Side Scaling (RSS) and is also wrapped by PcapPlusPlus, for more details please see RSS configuration in ",(0,i.jsx)(t.code,{children:"DpdkDevice::DpdkDeviceConfiguration"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"In our case we choose the simple case of 1 RX queue and 1 TX queue for each device. That means we'll use 1 thread for each direction."}),"\n",(0,i.jsx)(t.h2,{id:"dpdk-worker-threads",children:"DPDK Worker Threads"}),"\n",(0,i.jsx)(t.p,{children:"Now that we finished the DPDK setup and initialization, let's move on to the actual work of capturing and sending packets. The way we are going to do that is using DPDK worker threads. We will create 2 worker threads: one for sending packets from device1 to device2, and the other for sending packets from device2 to device1. Each worker thread will run on a separate CPU core and will execute an endless loop that will receive packets from one device and send them to the other."}),"\n",(0,i.jsxs)(t.p,{children:["Worker threads on PcapPlusPlus are instances of a class that inherits ",(0,i.jsx)(t.code,{children:"DpdkWorkerThread"}),". Let's write the header file of this class and see how it looks like:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#pragma once\n\n#include "DpdkDevice.h"\n#include "DpdkDeviceList.h"\n\nclass L2FwdWorkerThread : public pcpp::DpdkWorkerThread\n{\n    private:\n    pcpp::DpdkDevice* m_RxDevice;\n    pcpp::DpdkDevice* m_TxDevice;\n    bool m_Stop;\n    uint32_t m_CoreId;\n\n    public:\n    // c\'tor\n    L2FwdWorkerThread(pcpp::DpdkDevice* rxDevice, pcpp::DpdkDevice* txDevice);\n\n    // d\'tor (does nothing)\n    ~L2FwdWorkerThread() { }\n\n    // implement abstract method\n\n    // start running the worker thread\n    bool run(uint32_t coreId);\n\n    // ask the worker thread to stop\n    void stop();\n\n    // get worker thread core ID\n    uint32_t getCoreId() const;\n};\n'})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"DpdkWorkerThread"})," is an abstract class that requires inherited classes to implement 3 methods:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"run()"})," - start the worker. This method is called when the thread gets invoked and is expected to run throughout the life of the thread. Typically this method will contain an endless loop that runs the logic of the application"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"stop()"})," - stop the execution of the worker"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"getCoreId()"})," - return the core ID the worker is running on"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"In addition to implementing these method we also have a constructor and an empty destructor. We also save pointers to the RX and TX devices of where the worker will read packets from and send packets to. Now let's see the implementation of this class's methods:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#include "WorkerThread.h"\n\nL2FwdWorkerThread::L2FwdWorkerThread(pcpp::DpdkDevice* rxDevice, pcpp::DpdkDevice* txDevice) :\n    m_RxDevice(rxDevice), m_TxDevice(txDevice), m_Stop(true), m_CoreId(MAX_NUM_OF_CORES+1)\n{\n}\n\nbool L2FwdWorkerThread::run(uint32_t coreId)\n{\n    // Register coreId for this worker\n    m_CoreId = coreId;\n    m_Stop = false;\n\n    // initialize a mbuf packet array of size 64\n    pcpp::MBufRawPacket* mbufArr[64] = {};\n\n    // endless loop, until asking the thread to stop\n    while (!m_Stop)\n    {\n    // receive packets from RX device\n    uint16_t numOfPackets = m_RxDevice->receivePackets(mbufArr, 64, 0);\n\n    if (numOfPackets > 0)\n    {\n        // send received packet on the TX device\n        m_TxDevice->sendPackets(mbufArr, numOfPackets, 0);\n    }\n    }\n\n    return true;\n}\n\nvoid L2FwdWorkerThread::stop()\n{\n    m_Stop = true;\n}\n\nuint32_t L2FwdWorkerThread::getCoreId() const\n{\n    return m_CoreId;\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"The constructor is quite straight forward and initializes the private members. Please notice that the initialized value for the core ID is the maximum supported number of cores + 10."}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"stop()"})," and ",(0,i.jsx)(t.code,{children:"getCoreId()"})," methods are also quite trivial and self explanatory."]}),"\n",(0,i.jsxs)(t.p,{children:["Now let's take a look at the ",(0,i.jsx)(t.code,{children:"run()"})," method which contains the L2 forwarding logic. It consists of an endless loop that is interrupted through a flag set by the ",(0,i.jsx)(t.code,{children:"stop()"})," method (which indicates the thread should stop its execution). Before starting the loop it creates an array of 64 ",(0,i.jsx)(t.code,{children:"MBufRawPacket"})," pointers which will be used to store the received packets. The loop itself is very simple: it receives packets from the RX device using ",(0,i.jsx)(t.code,{children:"m_RxDevice->receivePackets(mbufArr, 64, 0)"}),". The packets are stored in the ",(0,i.jsx)(t.code,{children:"MBufRawPacket"})," array. Then it immediately sends those packets to the TX device using ",(0,i.jsx)(t.code,{children:"m_TxDevice->sendPackets(mbufArr, numOfPackets, 0)"}),". You may be asking who takes care of freeing the packet array and mbufs in each iteration of the loop. Well, this is done automatically by ",(0,i.jsx)(t.code,{children:"sendPackets()"})," so we don't have to take care of it ourselves."]}),"\n",(0,i.jsx)(t.p,{children:"This basically summarizes the implementation of the worker thread. In the current application we'll set up 2 worker threads: one for receiving packets from DEVICE_ID_1 and send them over DEVICE_ID_2 and another to receiving packets from DEVICE_ID_2 and send them over DEVICE_ID_1."}),"\n",(0,i.jsx)(t.h2,{id:"start-worker-threads",children:"Start Worker Threads"}),"\n",(0,i.jsx)(t.p,{children:"Now that we have the worker thread code ready, let's wire everything up and start the application. First, let's create the worker thread instances:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// Create worker threads\nstd::vector<pcpp::DpdkWorkerThread*> workers;\nworkers.push_back(new L2FwdWorkerThread(device1, device2));\nworkers.push_back(new L2FwdWorkerThread(device2, device1));\n"})}),"\n",(0,i.jsx)(t.p,{children:"As you can see we give the first worker thread device1 as the RX device and device2 as the TX device, and vice versa for the second worker thread. We store pointers to these two instances in a vector."}),"\n",(0,i.jsx)(t.p,{children:"Next step is to assign cores for these two worker threads to run on. DPDK enforces running each worker in a separate core to maximize performance. We will create a core mask that contains core 1 and core 2, let's see how this code looks like:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// Create core mask - use core 1 and 2 for the two threads\nint workersCoreMask = 0;\nfor (int i = 1; i <= 2; i++)\n{\n    workersCoreMask = workersCoreMask | (1 << i);\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"As you can see, we basically create the value 0x6 (or 0b110) where we set only the bits who correspond to the cores we want to use (1 and 2)"}),"\n",(0,i.jsx)(t.p,{children:"Now let's start the worker threads:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'// Start capture in async mode\nif (!pcpp::DpdkDeviceList::getInstance().startDpdkWorkerThreads(workersCoreMask, workers))\n{\n    std::cerr << "Couldn\'t start worker threads" << std::endl;\n    return 1;\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"management-and-statistics-collection",children:"Management And Statistics Collection"}),"\n",(0,i.jsx)(t.p,{children:"Now wer'e at a point where the 2 worker threads are running their endless loops which receives packets on one interface and sends them to the other interface. Practically we're done and the bridge should be working now. But to make the program more complete let's also add a graceful shutdown and user friendly prints to view the RX/TX statistics during application run."}),"\n",(0,i.jsxs)(t.p,{children:["For the graceful shutdown we'll use an utility class in PcapPlusPlus called ",(0,i.jsx)(t.code,{children:"ApplicationEventHandler"})," which encapsulates user-driven events that may occur during application run, such as process kill (ctrl+c). For using this class we'll need to add one line at the beginning of our ",(0,i.jsx)(t.code,{children:"main()"})," method which registers a callback we'd like to be called when ctrl+c is pressed:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"int main(int argc, char* argv[])\n{\n    // Register the on app close event handler\n    pcpp::ApplicationEventHandler::getInstance().onApplicationInterrupted(onApplicationInterrupted, NULL);\n\n    // Initialize DPDK\n    pcpp::CoreMask coreMaskToUse = pcpp::getCoreMaskForAllMachineCores();\n    pcpp::DpdkDeviceList::initDpdk(coreMaskToUse, MBUF_POOL_SIZE);\n\n    .....\n    .....\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Now let's implement this ",(0,i.jsx)(t.code,{children:"onApplicationInterrupted"})," callback. It'll have a very simple logic which sets a global flag:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'// Keep running flag\nbool keepRunning = true;\n\nvoid onApplicationInterrupted(void* cookie)\n{\n    keepRunning = false;\n    std::cout << std::endl << "Shutting down..." << std::endl;\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Now that we have this flag we can set up an endless loop that will run on the main thread and will keep printing statistics until ctrl+c is pressed. Please notice this is not the loop the worker threads are running, this is a different loop that runs on the management core (core 0 in our case). Let's dwell on this point a little bit more to better understand how DPDK works: the worker threads are running on cores 1 and 2 and their endless loop consumes 100% of their capacity. This guarantees achieving the best possible performance. However it's a good practice (although not required) to allocate at least one more CPU core for management, meaning tasks that are not in the application's fast-path, such as statistics collection, provide user-interface (CLI or other), health monitoring, etc. Usually this management core will be core 0, but you can set up any other core. This management core is also the one running the ",(0,i.jsx)(t.code,{children:"main()"})," method. Now let's go back to our application: once we started the worker threads on cores 1 and 2, we would like the management core to continuously gather statistics and print them to the user. The way to do that is to set up and endless loop inside the ",(0,i.jsx)(t.code,{children:"main()"})," method that will collect and print the stats and will be interrupted when the user presses ctrl+c (and setting the ",(0,i.jsx)(t.code,{children:"keepRunning"})," flag). Let's see the implementation:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#define COLLECT_STATS_EVERY_SEC 2\n\nuint64_t counter = 0;\nint statsCounter = 1;\n\n// Keep running while flag is on\nwhile (keepRunning)\n{\n    // Sleep for 1 second\n    sleep(1);\n\n    // Print stats every COLLECT_STATS_EVERY_SEC seconds\n    if (counter % COLLECT_STATS_EVERY_SEC == 0)\n    {\n        // Clear screen and move to top left\n        std::cout << "\\033[2J\\033[1;1H";\n\n        std::cout\n            << "Stats #" << statsCounter++ << std::endl\n            << "==========" << std::endl\n            << std::endl;\n\n        // Print stats of traffic going from Device1 to Device2\n        std::cout << std::endl\n            << "Device1->Device2 stats:" << std::endl\n            << std::endl;\n        printStats(device1, device2);\n\n        // Print stats of traffic going from Device2 to Device1\n        std::cout << std::endl\n            << "Device2->Device1 stats:" << std::endl\n            << std::endl;\n        printStats(device2, device1);\n    }\n    counter++;\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"As you can see the while loop collects statistics, prints them and then sleeps for 1 second."}),"\n",(0,i.jsx)(t.p,{children:"Now let's see how to gather network statistics:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'void printStats(pcpp::DpdkDevice* rxDevice, pcpp::DpdkDevice* txDevice)\n{\n    pcpp::DpdkDevice::DpdkDeviceStats rxStats;\n    pcpp::DpdkDevice::DpdkDeviceStats txStats;\n    rxDevice->getStatistics(rxStats);\n    txDevice->getStatistics(txStats);\n\n    std::vector<std::string> columnNames = {" ", "Total Packets", "Packets/sec", "Bytes", "Bits/sec"};\n    std::vector<int> columnLengths = {10, 15, 15, 15, 15};\n\n    pcpp::TablePrinter printer(columnNames, columnLengths);\n\n    std::stringstream totalRx;\n    totalRx << "rx" << "|" << rxStats.aggregatedRxStats.packets << "|" << rxStats.aggregatedRxStats.packetsPerSec << "|" << rxStats.aggregatedRxStats.bytes << "|" << rxStats.aggregatedRxStats.bytesPerSec*8;\n    printer.printRow(totalRx.str(), \'|\');\n\n    std::stringstream totalTx;\n    totalTx << "tx" << "|" << txStats.aggregatedTxStats.packets << "|" << txStats.aggregatedTxStats.packetsPerSec << "|" << txStats.aggregatedTxStats.bytes << "|" << txStats.aggregatedTxStats.bytesPerSec*8;\n    printer.printRow(totalTx.str(), \'|\');\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"DpdkDevice"})," exposes the ",(0,i.jsx)(t.code,{children:"getStatistics()"})," method for stats collection. Various counters are being collected such as the number of packets, amount of data, packet per second, bytes per second, etc. You can view them separately per RX/TX queue, or aggregated per device. It's important to understand that these numbers are only relevant for the timestamp they are being collected and therefore this timestamp is also included in the data. You can read more about this in the class documentation."]}),"\n",(0,i.jsxs)(t.p,{children:["If we go back to the code above, you can see we're collecting stats for the 2 devices. From one we take RX stats and from the other we take TX stats. We are using an utility class in PcapPlusPlus called ",(0,i.jsx)(t.code,{children:"TablePrinter"})," to print the numbers nicely in a table format. For the sake of simplicity we are taking only the aggregated RX and TX stats, but of course we can also take and prints RX/TX stats per queue."]}),"\n",(0,i.jsx)(t.p,{children:"We are almost done. One last thing to do is to run the necessary clean ups once the user presses ctrl+c. The only relevant clean-up is to stop the worker threads, let's see the code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// Stop worker threads\npcpp::DpdkDeviceList::getInstance().stopDpdkWorkerThreads();\n\n// Exit app with normal exit code\nreturn 0;\n"})}),"\n",(0,i.jsx)(t.p,{children:"That's it, we're all set! Now let's run the program and see the output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"Stats #5\n==========\n\nDevice1->Device2 stats:\n\n--------------------------------------------------------------------------------------\n|            | Total Packets   | Packets/sec     | Bytes           | Bits/sec        |\n--------------------------------------------------------------------------------------\n| rx         | 2850754         | 134607          | 4307240599      | 1627406832      |\n| tx         | 2851371         | 132058          | 4296728841      | 1592137536      |\n--------------------------------------------------------------------------------------\n\nDevice2->Device1 stats:\n\n--------------------------------------------------------------------------------------\n|            | Total Packets   | Packets/sec     | Bytes           | Bits/sec        |\n--------------------------------------------------------------------------------------\n| rx         | 160880          | 3273            | 11261910        | 1833416         |\n| tx         | 161001          | 4533            | 10627168        | 2393688         |\n--------------------------------------------------------------------------------------\n"})}),"\n",(0,i.jsx)(t.p,{children:"This output is printed every 2 seconds and shows for each direction: the total number of packets received and sent so far, the total number of bytes received and sent so far, packets per second and bps (bits per second)"}),"\n",(0,i.jsx)(t.h2,{id:"running-the-code",children:"Running the code"}),"\n","\n",(0,i.jsxs)(t.p,{children:["All code that was covered in this tutorial can be found ",(0,i.jsx)(a.A,{relativePath:"/Examples/Tutorials/Tutorial-DpdkL2Fwd",children:"here"}),". In order to compile and run the code please choose one of the options mentioned below,\nand then follow the instructions in the ",(0,i.jsx)(t.a,{href:"#post-build",children:"Post build"})," section."]}),"\n",(0,i.jsx)(t.h3,{id:"option-1-install-a-pre-compiled-version-of-pcapplusplus",children:"Option 1: Install a pre-compiled version of PcapPlusPlus"}),"\n",(0,i.jsxs)(t.p,{children:["You can download and install PcapPlusPlus using one of the options mentioned in the ",(0,i.jsx)(t.a,{href:"../install",children:"installation page"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Once installed, download all of the files in the ",(0,i.jsx)(a.A,{relativePath:"/Examples/Tutorials/Tutorial-DpdkL2Fwd",children:"tutorial folder"})," and run CMake:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"cmake -S . -B build\ncmake --build build\n"})}),"\n",(0,i.jsx)(t.p,{children:"The executable will be created in the same directory."}),"\n",(0,i.jsx)(t.admonition,{title:"Notes:",type:"tip",children:(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["If PcapPlusPlus is ",(0,i.jsx)(t.strong,{children:"NOT"})," installed in the default directory you may need to specify ",(0,i.jsx)(t.code,{children:"CMAKE_PREFIX_PATH"}),", for example:","\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"CMAKE_PREFIX_PATH=/my/pcapplusplus/path cmake -S . -B build\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["If DPDK is ",(0,i.jsx)(t.strong,{children:"NOT"})," installed in the default directory you may need to add it to ",(0,i.jsx)(t.code,{children:"CMAKE_PREFIX_PATH"})," as well, for example:","\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:'CMAKE_PREFIX_PATH="/my/pcapplusplus/path;/my/dpdk/path" cmake -S . -B build\n'})}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(t.h3,{id:"option-2-build-the-tutorials-with-pcapplusplus",children:"Option 2: build the tutorials with PcapPlusPlus"}),"\n",(0,i.jsxs)(t.p,{children:["If you're building PcapPlusPlus from source and would like to build the tutorials as well you can use the ",(0,i.jsx)(t.code,{children:"-DPCAPPP_BUILD_TUTORIALS=ON"})," option.\nPlease refer to the ",(0,i.jsx)(t.a,{href:"../install#build-from-source",children:"build from source page"})," for more details (choose your platform page)."]}),"\n",(0,i.jsx)(t.h3,{id:"post-build",children:"Post build"}),"\n",(0,i.jsxs)(t.p,{children:["After done building the tutorial code and/or PcapPlusPlus and before running the tutorial please run ",(0,i.jsx)(t.code,{children:"setup-dpdk.sh"})," script to setup the necessary runtime parameters for DPDK. More details on this script can be found ",(0,i.jsx)(t.a,{href:"../dpdk",children:"here"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Please note this tutorial needs a special environment to run on, as it needs at least 2 devices connected only through a third device running this application. If you need help setting up this environment and you have VirtualBox you can use ",(0,i.jsx)(t.a,{href:"https://www.brianlinkletter.com/how-to-use-virtualbox-to-emulate-a-network/",children:"this"})," great tutorial which will walk you through it."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},4650:(e,t,n)=>{n.d(t,{A:()=>r});n(6540);var s=n(7646),i=n(4848);const r=function(e){let{relativePath:t,children:n}=e;return(0,i.jsx)("a",{href:(0,s.t_)()+t,children:n})}},7646:(e,t,n)=>{n.d(t,{ZA:()=>c,iI:()=>l,i_:()=>d,jA:()=>p,k9:()=>r,kF:()=>a,l:()=>o,t_:()=>h,zk:()=>u});var s=n(6942);const i="https://github.com/seladb/PcapPlusPlus";function r(){return i}function a(){const e=(0,s.r7)(),t=(0,s.ir)();return"Next"===t.label?e.label:t.label}function o(e){return`${i}/releases/tag/${e}`}function c(){return o(a())}function d(){return`${i}/archive/${a()}.zip`}function l(){return`${i}/archive/${a()}.tar.gz`}function h(){const e=(0,s.ir)(),t="Next"===e.label?"master":e.label;return`${i}/tree/${t}`}function p(){return`${i}/archive/master.zip`}function u(){return`${i}/archive/master.tar.gz`}},5355:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/L2Fwd-d63de0729bc526130874df7c156e1090.png"},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);