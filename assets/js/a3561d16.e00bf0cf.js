"use strict";(self.webpackChunkpcapplusplus_github_io=self.webpackChunkpcapplusplus_github_io||[]).push([[3660],{3551:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"features","title":"Feature Overview","description":"Packet capture","source":"@site/versioned_docs/version-v21.11/features.mdx","sourceDirName":".","slug":"/features","permalink":"/docs/v21.11/features","draft":false,"unlisted":false,"editUrl":"https://github.com/PcapPlusPlus/pcapplusplus.github.io/edit/master/versioned_docs/version-v21.11/features.mdx","tags":[],"version":"v21.11","sidebarPosition":3,"frontMatter":{"title":"Feature Overview","sidebar_position":3},"sidebar":"docs","previous":{"title":"Build on FreeBSD","permalink":"/docs/v21.11/install/freebsd"},"next":{"title":"DPDK Support","permalink":"/docs/v21.11/dpdk"}}');var r=t(4848),s=t(8453),a=t(1096),o=t(6432);const l={title:"Feature Overview",sidebar_position:3},c="Feature Overview",p={},d=[{value:"Packet capture",id:"packet-capture",level:2},{value:"What&#39;s next?",id:"whats-next",level:3},{value:"Packet parsing and crafting",id:"packet-parsing-and-crafting",level:2},{value:"Read and write packets from/to files",id:"read-and-write-packets-fromto-files",level:2},{value:"Reading/Writing PCAPNG files with compression",id:"readingwriting-pcapng-files-with-compression",level:3},{value:"DPDK support",id:"dpdk-support",level:2},{value:"PF_RING support",id:"pf_ring-support",level:2},{value:"Packet reassembly",id:"packet-reassembly",level:2},{value:"Packet filtering",id:"packet-filtering",level:2},{value:"TLS Fingerprinting",id:"tls-fingerprinting",level:2},{value:"Supported network protocols",id:"supported-network-protocols",level:2},{value:"License",id:"license",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"feature-overview",children:"Feature Overview"})}),"\n","\n",(0,r.jsx)(a.A,{toc:d,maxHeadingLevel:2}),"\n",(0,r.jsx)(n.h2,{id:"packet-capture",children:"Packet capture"}),"\n",(0,r.jsxs)(n.p,{children:["Packet capture (A.K.A packet sniffing or network tapping) is the process of intercepting and logging traffic that passes over a digital network or part of a network (taken from ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Packet_analyzer",children:"Wikipedia"}),"). It is one of the most important and popular features of PcapPlusPlus and it is what PcapPlusPlus is basically all about."]}),"\n",(0,r.jsxs)(n.p,{children:["There are multiple packet capture engines out there, the most popular are ",(0,r.jsx)(n.a,{href:"https://www.tcpdump.org/",children:"libpcap"}),", ",(0,r.jsx)(n.a,{href:"https://www.winpcap.org/",children:"WinPcap"})," (which is libpcap for Windows), ",(0,r.jsx)(n.a,{href:"https://nmap.org/npcap/",children:"Npcap"})," (WinPcap's successor), ",(0,r.jsx)(n.a,{href:"https://www.dpdk.org/",children:"Intel DPDK"}),", ",(0,r.jsx)(n.a,{href:"https://www.ntop.org/products/packet-capture/pf_ring/",children:"ntop's PF_RING"})," and ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Network_socket#Raw_socket",children:"raw sockets"}),". Each engine has different strengths, purposes and features, works on different platforms and obviously has different APIs and setup process. Most of them are written in C (to achieve the best performance) and don't expose a C++ interface."]}),"\n",(0,r.jsx)(n.p,{children:"PcapPlusPlus aims to create a consolidated and easy-to-use C++ API for all of these engines which simplifies their complexity and provides a common infrastructure for capturing, processing, analyzing and forging of network packets."}),"\n",(0,r.jsx)(n.p,{children:"Here is a list of of the packet capture engines currently supported:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.tcpdump.org/",children:"libpcap"})," live capture (on Linux, MacOS, Android, FreeBSD)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.winpcap.org/",children:"WinPcap"}),"/",(0,r.jsx)(n.a,{href:"https://nmap.org/npcap/",children:"Npcap"})," live capture (on Windows)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.dpdk.org/",children:"Intel DPDK"})," (on Linux)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.ntop.org/products/packet-capture/pf_ring/",children:"ntop's Vanilla PF_RING"})," (on Linux)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.winpcap.org/docs/docs_412/html/group__remote.html",children:"WinPcap Remote capture"})," (on Windows)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The main features provided for each one are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Browse all interfaces available on the machine"}),"\n",(0,r.jsx)(n.li,{children:"Capture network traffic on a specific interface"}),"\n",(0,r.jsx)(n.li,{children:"Send packets to the network"}),"\n",(0,r.jsx)(n.li,{children:"Filter packets"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"whats-next",children:"What's next?"}),"\n",(0,r.jsxs)(n.p,{children:["You can find out more information in the ",(0,r.jsx)(n.a,{href:"./api",children:"API documentation"}),", ",(0,r.jsx)(n.a,{href:"./tutorials/intro",children:"tutorial pages"})," and browse through the code of the ",(0,r.jsx)(n.a,{href:"./examples",children:"example apps"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"packet-parsing-and-crafting",children:"Packet parsing and crafting"}),"\n",(0,r.jsx)(n.p,{children:"PcapPlusPlus provides advanced capabilities for packet analysis which include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Packet parsing, which is a detailed analysis of the protocols and layers of a packet"}),"\n",(0,r.jsx)(n.li,{children:"Packet crafting which is generation and editing of network packets"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["A large variety of network protocols are supported, see the full list ",(0,r.jsx)(n.a,{href:"#supported-network-protocols",children:"here"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Packets can be analyzed from any source including those captured from the network, packets stored in PCAP/PCAPNG files, and more.\nThe design of PcapPlusPlus allows similar analysis capabilities for each packet, regardless of where it came from. For example, you can write the same code for parsing packets that are captured using DPDK, libpcap, WinPcap/Npcap, raw sockets or read from a PCAP/PCAPNG file. Same goes for packet crafting."}),"\n",(0,r.jsx)(n.p,{children:"Consider this simple code snippet that shows how to read a packet from a PCAP file, parse it, identify if it's an IPv4 packet and print the source and dest IP addresses:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "IPv4Layer.h"\n#include "Packet.h"\n#include "PcapFileDevice.h"\n\nint main(int argc, char* argv[])\n{\n    // open a pcap file for reading\n    pcpp::PcapFileReaderDevice reader("1_packet.pcap");\n    if (!reader.open())\n    {\n        printf("Error opening the pcap file\\n");\n        return 1;\n    }\n\n    // read the first packet from the file (in this case the\n    // file contains only one packet)\n    pcpp::RawPacket rawPacket;\n    if (!reader.getNextPacket(rawPacket))\n    {\n        printf("Couldn\'t read the first packet in the file\\n");\n        return 1;\n    }\n\n    // parse the raw packet into a parsed packet\n    pcpp::Packet parsedPacket(&rawPacket);\n\n    // check if it\'s an IPv4 packet\n    if (parsedPacket.isPacketOfType(pcpp::IPv4))\n    {\n        // extract source and dest IPs\n        pcpp::IPv4Address srcIP = parsedPacket.getLayerOfType()->getSrcIPv4Address();\n        pcpp::IPv4Address destIP = parsedPacket.getLayerOfType()->getDstIPv4Address();\n\n        // print source and dest IPs\n        printf("Source IP is \'%s\'; Dest IP is \'%s\'\\n", srcIP.toString().c_str(), destIP.toString().c_str());\n    }\n\n    // close the file\n    reader.close();\n\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"read-and-write-packets-fromto-files",children:"Read and write packets from/to files"}),"\n",(0,r.jsxs)(n.p,{children:["Network packets can be stored in files, usually for offline analysis. ",(0,r.jsx)(n.a,{href:"https://wiki.wireshark.org/Development/LibpcapFileFormat",children:"PCAP"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/pcapng/pcapng",children:"PCAPNG"})," are the two most popular file formats and both are supported in PcapPlusPlus."]}),"\n",(0,r.jsx)(n.p,{children:"The main features include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Read packets from PCAP/PCAPNG files"}),"\n",(0,r.jsx)(n.li,{children:"Create new PCAP/PCAPNG files and write packets to them"}),"\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.a,{href:"#packet-filtering",children:"packet filtering mechanism"})," to read or write only packets that match the filter"]}),"\n",(0,r.jsx)(n.li,{children:"Append packets to existing PCAP/PCAPNG files"}),"\n",(0,r.jsxs)(n.li,{children:["Write compressed PCAPNG files using ",(0,r.jsx)(n.a,{href:"https://facebook.github.io/zstd/",children:"Zstd"})," compression in real time (OPTIONAL and requires building with Zstd)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Consider this simple code snippet that shows how to open a PCAP file for reading and another PCAPNG file for writing, and then read all packets from the PCAP file and write them to the PCAPNG file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// create a pcap file reader\npcpp::PcapFileReaderDevice pcapReader("input.pcap");\npcapReader.open();\n\n// create a pcapng file writer\npcpp::PcapNgFileWriterDevice pcapNgWriter("output.pcapng");\npcapNgWriter.open();\n\n// raw packet object\npcpp::RawPacket rawPacket;\n\n// read packets from pcap reader and write pcapng writer\nwhile (pcapReader->getNextPacket(rawPacket)) {\n  pcapNgWriter.writePacket(rawPacket);\n}\n\npcapNgReader.close(); //These will close when going out of scope\npcapNgWriter.close(); //or you may close them manually\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For more information please refer to the ",(0,r.jsx)(n.a,{href:"./tutorials/read-write-pcap",children:"Read/Write Pcap Files tutorial"}),", look at the ",(0,r.jsx)(n.a,{href:"./api",children:"API documentation"})," or browse through the code of the ",(0,r.jsx)(n.a,{href:"./examples",children:"example apps"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"readingwriting-pcapng-files-with-compression",children:"Reading/Writing PCAPNG files with compression"}),"\n",(0,r.jsxs)(n.p,{children:["Zstd streaming compression is only supported when working with pcapng files. To enable this feature you must build PcapPlusPlus with Zstd support. For more guidance on building PcapPlusPlus see the ",(0,r.jsx)(n.a,{href:"./install",children:"build instructions per platform"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Once you have a working build modifying your code to start enabling compression is fast and easy!"}),"\n",(0,r.jsx)(n.p,{children:"When writing PCAPNG files, to enable streaming compression all you need to do is add a second integer argument when constructing your writer. The integer should be between 0-10 and it specifies the compression level. Values outside this range will be clamped. A value of zero, which is also the default, indicates to skip compression. A value of 10 would indicate use maximum compression. For most scenarios a value of 5 or less should be adequate."}),"\n",(0,r.jsxs)(n.p,{children:["For reading compressed PCAPNG files the only requirement is that the file name extension must terminate in ",(0,r.jsx)(n.code,{children:".zstd"}),". If a compressed file is supplied to the reader without the ",(0,r.jsx)(n.code,{children:".zstd"})," extension the file will fail to load. Currently, APPENDING to a compressed file is NOT supported!"]}),"\n",(0,r.jsx)(n.p,{children:"If you write code enabling compression, by adding a compression level to your writer constructor, but use a build of PcapPlusPlus without compression support, everything will work just fine and the compression will be skipped/ignored and normal PCAPNG files will be generated/read."}),"\n",(0,r.jsx)(n.p,{children:"There is a tradeoff between compression speed and compression efficiency. A compression value of 10 will yield the most compression but be slower, while a value of 1 will yield the least compression but be fastest. Depending upon your capture rates and data size you can tune this number to fit your needs."}),"\n",(0,r.jsx)(n.p,{children:"Since Zstd is designed to support fast and efficient streaming compression most users should not see any noticeable performance impact when enabling compression. Exact savings from compression will always vary based upon the input data, however; in one test case an uncompressed PCAPNG file of 140MB was duplicated with a compression level of 5 to yield a compressed PCAPNG file of only 40MB giving about 4x space savings! Note that the compression is performed while the file is written so you will not notice any delay when closing the file or a long processing time like you work normally experience when compressing an existing file."}),"\n",(0,r.jsx)(n.p,{children:"Some example compression code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// create a pcapng file reader\npcpp::PcapNgFileReaderDevice reader("input.pcap.zstd");  //Notice the Zstd extension\nreader.open();                                           //This is required for proper loading\n\n// create a pcapng file writer\npcpp::PcapNgFileWriterDevice writer("output.pcapng.zstd", 5);  //The second integer argument 5\npcapNgWriter.open();                                           //is the compression level to use\n\n// read packets from pcapng reader and write pcapng writer\nwhile (reader->getNextPacket(rawPacket)) {\n  writer.writePacket(rawPacket);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"dpdk-support",children:"DPDK support"}),"\n",(0,r.jsxs)(n.p,{children:["The Data Plane Development Kit (DPDK) is a set of data plane libraries and network interface controller drivers for fast packet processing, currently managed as an open-source project under the Linux Foundation. The DPDK provides a programming framework for x86, ARM, and PowerPC processors and enables faster development of high speed data packet networking applications (taken from ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Data_Plane_Development_Kit",children:"Wikipedia"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["DPDK provides packet processing in line rate using kernel bypass for a large range of network interface cards. Notice that not every NIC supports DPDK as the NIC needs to support the kernel bypass feature. You can read more about DPDK in ",(0,r.jsx)(n.a,{href:"https://www.dpdk.org/",children:"DPDK's web-site"})," and get a list of supported NICs ",(0,r.jsx)(n.a,{href:"http://core.dpdk.org/supported/",children:"here"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"As DPDK API is written in C, PcapPlusPlus wraps its main functionality in easy-to-use C++ wrappers which have minimum impact on performance and packet processing rate. In addition it brings DPDK to the PcapPlusPlus framework and APIs so you can use DPDK together with other PcapPlusPlus features such as packet analysis, etc."}),"\n",(0,r.jsxs)(n.p,{children:["You can find more information about setting up DPDK and the API in ",(0,r.jsx)(n.a,{href:"./dpdk",children:"DPDK support page"})," and also in ",(0,r.jsx)(n.a,{href:"./tutorials/dpdk",children:"DPDK tutorial"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"pf_ring-support",children:"PF_RING support"}),"\n",(0,r.jsxs)(n.p,{children:["PF_RING\u2122 is a new type of network socket that dramatically improves the packet capture speed. It's providing high-speed packet capture, filtering and analysis (taken from ",(0,r.jsx)(n.a,{href:"https://www.ntop.org/products/packet-capture/pf_ring/",children:"ntop's website"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["PcapPlusPlus provides a clean and simple C++ wrapper API for ",(0,r.jsx)(n.a,{href:"https://www.ntop.org/products/packet-capture/pf_ring/",children:"Vanilla PF_RING"}),". Currently only Vanilla PF_RING is supported which provides significant performance improvement in comparison to libpcap or Linux kernel, but ",(0,r.jsx)(n.a,{href:"https://www.ntop.org/products/packet-capture/pf_ring/pf_ring-zc-zero-copy/",children:"PF_RING Zero Copy"})," (which allows kernel bypass and zero-copy of packets from NIC to user-space) is not yet supported."]}),"\n",(0,r.jsx)(n.p,{children:"In order to compile PcapPlusPlus with PF_RING you need to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Download PF_RING from ",(0,r.jsx)(n.a,{href:"https://www.ntop.org/get-started/download/#PF_RING",children:"ntop's web-site"})]}),"\n",(0,r.jsxs)(n.li,{children:["Once PF_RING is compiled successfully, you need to run PcapPlusPlus's ",(0,r.jsx)(n.code,{children:"configure-linux.sh"}),' script and type "y" in "Compile PcapPlusPlus with PF_RING?"']}),"\n",(0,r.jsx)(n.li,{children:"Then you can compile PcapPlusPlus as usual"}),"\n",(0,r.jsx)(n.li,{children:"Before you activate any PcapPlusPlus application that uses PF_RING, don't forget to enable PF_RING kernel module. If you forget to do that, PcapPlusPlus will output an - appropriate error on startup which will remind you:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"sudo insmod <PF_RING_LOCATION>/kernel/pf_ring.ko\n"})}),"\n",(0,r.jsx)(n.h2,{id:"packet-reassembly",children:"Packet reassembly"}),"\n",(0,r.jsx)(n.p,{children:"Network protocols often need to transport large chunks of data which are complete in themselves, e.g. when transferring a file. The underlying protocol might not be able to handle that chunk size (e.g. limitation of the network packet size), or is stream-based like TCP, which doesn\u2019t know data chunks at all."}),"\n",(0,r.jsx)(n.p,{children:"In that case the network protocol has to handle the chunk boundaries itself and (if required) spread the data over multiple packets. It obviously also needs a mechanism to determine the chunk boundaries on the receiving side."}),"\n",(0,r.jsx)(n.p,{children:"This mechanism is called reassembly, although a specific protocol specification might use a different term for this (e.g. desegmentation, defragmentation, etc)."}),"\n",(0,r.jsxs)(n.p,{children:["(this description is taken from ",(0,r.jsx)(n.a,{href:"https://www.wireshark.org/docs/wsug_html_chunked/ChAdvReassemblySection.html",children:"Wireshark documentation"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"PcapPlusPlus currently supports two types of packets reassembly:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["IPv4 and IPv6 defragmentation which is a Layer 3 (Network layer) packet reassembly. You can read more about IP fragmentation ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/IP_fragmentation",children:"here"}),". To get more information about how it works and the API to use it please refer to the ",(0,r.jsx)(n.a,{href:"./api",children:"API documentation"})," and browse through the code of the ",(0,r.jsx)(n.a,{href:"./examples#ipdefragutil",children:"IPDefragUtil"})," and ",(0,r.jsx)(n.a,{href:"./examples#ipfragutil",children:"IPFragUtil"})," example apps"]}),"\n",(0,r.jsxs)(n.li,{children:["TCP reassembly which is a Layer 4 (Transport layer) packet reassembly. To get more information on how it works and the API to use it please refer to the ",(0,r.jsx)(n.a,{href:"./api",children:"API documentation"})," and browse through the code of the ",(0,r.jsx)(n.a,{href:"./examples#tcpreassembly",children:"TcpReassembly"})," example app"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"packet-filtering",children:"Packet filtering"}),"\n",(0,r.jsxs)(n.p,{children:["Most packet capture engines contain packet filtering capabilities. In order to set the filters there should be a known syntax user can use. The most popular syntax is ",(0,r.jsx)(n.a,{href:"http://en.wikipedia.org/wiki/Berkeley_Packet_Filter",children:"Berkeley Packet Filter (BPF)"}),". Detailed explanation of the syntax can be found ",(0,r.jsx)(n.a,{href:"http://www.tcpdump.org/manpages/pcap-filter.7.html",children:"here"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The challenge with BPF is that it is too complicated and poorly documented. When compiling BPF filters you often get syntax errors that are hard to understand and debug. Our experience with BPF was not good, so we decided to include in PcapPlusPlus a filter mechanism which is more structured, easier to understand and less error-prone by creating classes that represent filters. Each possible filter phrase is represented by a class. The filter, in the end, is that class."}),"\n",(0,r.jsxs)(n.p,{children:["Consider the following code snippet for creating the filter ",(0,r.jsx)(n.code,{children:"src ip 1.1.1.1 and dst port 80"})," and setting it up on a packet capture device:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// create a filter instance to capture only traffic on port 80\npcpp::PortFilter portFilter(80, pcpp::DST);\n\n// create a filter instance to capture only TCP traffic\npcpp::IPFilter ipFilter("1.1.1.1", pcpp::SRC);\n\n// create an AND filter to combine both filters - capture only TCP traffic on port 80\npcpp::AndFilter andFilter;\nandFilter.addFilter(&portFilter);\nandFilter.addFilter(&ipFilter);\n\n// set the filter on the device\ndev->setFilter(andFilter);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can read more in the ",(0,r.jsxs)(o.A,{relativePath:"/_pcap_filter_8h.html",children:[(0,r.jsx)(n.code,{children:"PcapFilter.h"})," API documentation"]})," and in the ",(0,r.jsx)(n.a,{href:"./tutorials/capture-packets#filtering-packets",children:"capture packets tutorial"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"tls-fingerprinting",children:"TLS Fingerprinting"}),"\n",(0,r.jsx)(n.p,{children:"TLS Fingerprinting is a technique that extracts specific parameters from TLS handshake messages such as ClientHello and ServerHello. Most applications that need network access (such as browsers, apps, etc.) have a unique combination(s) of these parameters while making network connections, so this technique can be used to fingerprint those applications. By using a database of curated fingerprints it's possible to detect network traffic anomalies which can point to malware, security vulnerabilities or other undesired behavior. It can also be used for network visibility, for example identify popular applications, detect applications that use weak encryption, etc. This method of fingerprinting is very effective because TLS handshake is often done in lower levels of the application hence it's difficult to forge or tamper with it."}),"\n",(0,r.jsxs)(n.p,{children:["The primary concept for TLS fingerprinting came from ",(0,r.jsx)(n.a,{href:"https://blog.squarelemon.com/tls-fingerprinting/",children:"Lee Brotherston\u2019s 2015 research"})," (",(0,r.jsx)(n.a,{href:"https://github.com/LeeBrotherston/tls-fingerprinting",children:"GitHub repo"}),"). Following his work more articles and implementations came out, one of them was ",(0,r.jsx)(n.a,{href:"https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967",children:"Salesforce JA3"})," (",(0,r.jsx)(n.a,{href:"https://github.com/salesforce/ja3",children:"GitHub repo"}),") which implements TLS fingerprinting in Python and ",(0,r.jsx)(n.a,{href:"https://www.zeekurity.org/",children:"Zeek"}),'. This project introduced two types of TLS fingerprinting: JA3 which is the "traditional" ClientHello fingerprinting (which is the more common and well-known method), and JA3S which is ServerHello fingerprinting.']}),"\n",(0,r.jsx)(n.p,{children:"PcapPlusPlus contains an implementation of JA3 and JA3S in C++. There are not a lot of C++ implementations for TLS fingerprinting and we thought this can be a good feature for PcapPlusPlus as it already analyzes TLS network traffic."}),"\n",(0,r.jsx)(n.p,{children:"Using TLS fingerprinting in PcapPlusPlus is very easy, here is a quick example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"pcpp::SSLHandshakeLayer* sslHandshakeLayer = parsedPacket.getLayerOfType<pcpp::SSLHandshakeLayer>();\npcpp::SSLClientHelloMessage* clientHelloMessage = sslHandshakeLayer->getHandshakeMessageOfType<pcpp::SSLClientHelloMessage>();\npcpp::SSLClientHelloMessage::ClientHelloTLSFingerprint tlsFingerprint = clientHelloMessage->generateTLSFingerprint();\nstd::pair<std::string, std::string> tlsFingerprintStringAndMD5 = tlsFingerprint.toStringAndMD5();\nprintf(\"ClientHello (JA3) TLS fingerprint: '%s'; MD5: '%s'\\n\", tlsFingerprintStringAndMD5.first.c_str(), tlsFingerprintStringAndMD5.second.c_str());\n"})}),"\n",(0,r.jsxs)(n.p,{children:["ServerHello TLS fingerprinting (JA3S) is almost similar but for ",(0,r.jsx)(n.code,{children:"pcpp::SSLServerHelloMessage"})," messages."]}),"\n",(0,r.jsxs)(n.p,{children:["To learn more please take a look at the ",(0,r.jsx)(n.a,{href:"https://github.com/seladb/PcapPlusPlus/tree/%7B%7Bsite.github_label%7D%7D/Examples/TLSFingerprinting",children:"TLS fingerprinting example"})," in PcapPlusPlus GitHub repo which demonstrates how to collect ClientHello and ServerHello fingerprints from live traffic or pcap files, write them to an output file and display various statistics."]}),"\n",(0,r.jsx)(n.h2,{id:"supported-network-protocols",children:"Supported network protocols"}),"\n",(0,r.jsx)(n.p,{children:"PcapPlusPlus currently supports parsing, editing and generation of packets of the following protocols:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Ethernet II"}),"\n",(0,r.jsx)(n.li,{children:"IEEE 802.3 Ethernet"}),"\n",(0,r.jsx)(n.li,{children:"SLL (Linux cooked capture)"}),"\n",(0,r.jsx)(n.li,{children:"Null/Loopback"}),"\n",(0,r.jsx)(n.li,{children:"Raw IP (IPv4 & IPv6)"}),"\n",(0,r.jsx)(n.li,{children:"IPv4"}),"\n",(0,r.jsx)(n.li,{children:"IPv6"}),"\n",(0,r.jsx)(n.li,{children:"ARP"}),"\n",(0,r.jsx)(n.li,{children:"VLAN"}),"\n",(0,r.jsx)(n.li,{children:"VXLAN"}),"\n",(0,r.jsx)(n.li,{children:"MPLS"}),"\n",(0,r.jsx)(n.li,{children:"PPPoE"}),"\n",(0,r.jsx)(n.li,{children:"GRE"}),"\n",(0,r.jsx)(n.li,{children:"TCP"}),"\n",(0,r.jsx)(n.li,{children:"UDP"}),"\n",(0,r.jsx)(n.li,{children:"GTP (v1)"}),"\n",(0,r.jsx)(n.li,{children:"ICMP"}),"\n",(0,r.jsx)(n.li,{children:"IGMP (IGMPv1, IGMPv2 and IGMPv3 are supported)"}),"\n",(0,r.jsx)(n.li,{children:"IPSec AH & ESP - parsing only (no editing capabilities)"}),"\n",(0,r.jsx)(n.li,{children:"SIP"}),"\n",(0,r.jsx)(n.li,{children:"SDP"}),"\n",(0,r.jsx)(n.li,{children:"Radius"}),"\n",(0,r.jsx)(n.li,{children:"DNS"}),"\n",(0,r.jsx)(n.li,{children:"DHCP"}),"\n",(0,r.jsx)(n.li,{children:"BGP (v4)"}),"\n",(0,r.jsx)(n.li,{children:"SSH - parsing only (no editing capabilities)"}),"\n",(0,r.jsx)(n.li,{children:"HTTP headers (request & response)"}),"\n",(0,r.jsx)(n.li,{children:"SSL/TLS - parsing only (no editing capabilities)"}),"\n",(0,r.jsx)(n.li,{children:"Packet trailer (a.k.a footer or padding)"}),"\n",(0,r.jsx)(n.li,{children:"Generic payload"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,r.jsxs)(n.p,{children:["PcapPlusPlus is released under the ",(0,r.jsx)(n.a,{href:"https://unlicense.org/",children:"Unlicense license"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1096:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var i=t(1021);const r={tableOfContentsInline:"tableOfContentsInline_prmo"};var s=t(4848);function a(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:a}=e;return(0,s.jsx)("div",{className:r.tableOfContentsInline,children:(0,s.jsx)(i.A,{toc:n,minHeadingLevel:t,maxHeadingLevel:a,className:"table-of-contents",linkClassName:null})})}},1021:(e,n,t)=>{t.d(n,{A:()=>g});var i=t(6540),r=t(3115);function s(e){const n=e.map((e=>({...e,parentIndex:-1,children:[]}))),t=Array(7).fill(-1);n.forEach(((e,n)=>{const i=t.slice(2,e.level);e.parentIndex=Math.max(...i),t[e.level]=n}));const i=[];return n.forEach((e=>{const{parentIndex:t,...r}=e;t>=0?n[t].children.push(r):i.push(r)})),i}function a(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:i}=e;return n.flatMap((e=>{const n=a({toc:e.children,minHeadingLevel:t,maxHeadingLevel:i});return function(e){return e.level>=t&&e.level<=i}(e)?[{...e,children:n}]:n}))}function o(e){const n=e.getBoundingClientRect();return n.top===n.bottom?o(e.parentNode):n}function l(e,n){let{anchorTopOffset:t}=n;const i=e.find((e=>o(e).top>=t));if(i){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(o(i))?i:e[e.indexOf(i)-1]??null}return e[e.length-1]??null}function c(){const e=(0,i.useRef)(0),{navbar:{hideOnScroll:n}}=(0,r.p)();return(0,i.useEffect)((()=>{e.current=n?0:document.querySelector(".navbar").clientHeight}),[n]),e}function p(e){const n=(0,i.useRef)(void 0),t=c();(0,i.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:i,linkActiveClassName:r,minHeadingLevel:s,maxHeadingLevel:a}=e;function o(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(i),o=function(e){let{minHeadingLevel:n,maxHeadingLevel:t}=e;const i=[];for(let r=n;r<=t;r+=1)i.push(`h${r}.anchor`);return Array.from(document.querySelectorAll(i.join()))}({minHeadingLevel:s,maxHeadingLevel:a}),c=l(o,{anchorTopOffset:t.current}),p=e.find((e=>c&&c.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,t){t?(n.current&&n.current!==e&&n.current.classList.remove(r),e.classList.add(r),n.current=e):e.classList.remove(r)}(e,e===p)}))}return document.addEventListener("scroll",o),document.addEventListener("resize",o),o(),()=>{document.removeEventListener("scroll",o),document.removeEventListener("resize",o)}}),[e,t])}var d=t(6289),h=t(4848);function u(e){let{toc:n,className:t,linkClassName:i,isChild:r}=e;return n.length?(0,h.jsx)("ul",{className:r?void 0:t,children:n.map((e=>(0,h.jsxs)("li",{children:[(0,h.jsx)(d.A,{to:`#${e.id}`,className:i??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,h.jsx)(u,{isChild:!0,toc:e.children,className:t,linkClassName:i})]},e.id)))}):null}const f=i.memo(u);function g(e){let{toc:n,className:t="table-of-contents table-of-contents__left-border",linkClassName:o="table-of-contents__link",linkActiveClassName:l,minHeadingLevel:c,maxHeadingLevel:d,...u}=e;const g=(0,r.p)(),m=c??g.tableOfContents.minHeadingLevel,P=d??g.tableOfContents.maxHeadingLevel,w=function(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:r}=e;return(0,i.useMemo)((()=>a({toc:s(n),minHeadingLevel:t,maxHeadingLevel:r})),[n,t,r])}({toc:n,minHeadingLevel:m,maxHeadingLevel:P});return p((0,i.useMemo)((()=>{if(o&&l)return{linkClassName:o,linkActiveClassName:l,minHeadingLevel:m,maxHeadingLevel:P}}),[o,l,m,P])),(0,h.jsx)(f,{toc:w,className:t,linkClassName:o,...u})}},6432:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var i=t(6942),r=t(9030),s=t(4848);const a=function(e){let{relativePath:n,children:t}=e;return(0,s.jsx)("a",{href:(0,r.Ay)(`/api-docs/${(0,i.ir)().label.toLowerCase()}${n}`),children:t})}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);